name: rust sccache
description: Shared Compilation Cache for Rust
branding:
  icon: award
  color: green
inputs:
  version:
    description: The version of sccache to use
    required: true
    default: 'v0.3.1'
  key:
    description: An additional key for the cache
    required: false
  shared-key:
    description: An additional key that is stable over multiple jobs
    required: false
  skip-save:
    description: Skip saving the cache
    required: false
    default: 'false'
  autoclean:
    description: Automatically clean the cache
    required: false
    default: 'false'
  cache-size:
    description: The maximum size of the cache
    required: false
  cache-dir:
    description: The directory to store the cache in
    required: false
outputs:
  cache-hit:
    description: A boolean value to indicate an exact match was found for the key.
    value: ${{ steps.restore.outputs.cache-hit == 'true' || steps.restore-save.outputs.cache-hit == 'true' }}
  cache-primary-key:
    description: Cache primary key passed in the input to use in subsequent steps of the workflow.
    value: ${{ steps.restore.outputs.cache-primary-key == 'true' || steps.restore-save.outputs.cache-primary-key == 'true' }}
  cache-matched-key:
    description: Key of the cache that was restored, it could either be the primary key on cache-hit or a partial/complete match of one of the restore keys.
    value: ${{ steps.restore.outputs.cache-matched-key == 'true' || steps.restore-save.outputs.cache-matched-key == 'true' }}
runs:
  using: composite
  steps:
    - id: rust
      name: Checking Rust version
      run: |
        version="$(rustc -vV)"
        echo "release=$(sed -En 's/^release: (.+)/\1/p' <<< "$version")" >> $GITHUB_OUTPUT
        echo "host=$(sed -En 's/^host: (.+)/\1/p' <<< "$version")" >> $GITHUB_OUTPUT
        echo "commit-hash=$(sed -En 's/^commit-hash: (.{0,12}).*/\1/p' <<< "$version")" >> $GITHUB_OUTPUT
      shell: bash
    - id: platform
      name: Defining Platform to download
      env:
        OS: ${{ runner.os }}
      run: |
        platform='unknown-linux-musl'
        if [[ "$OS" == "macOS" ]]; then
          platform='apple-darwin'
        fi
        echo "platform=${platform}" >> $GITHUB_OUTPUT
      shell: bash
    - id: cache
      name: Computing cache key
      run: |
        key='v0-sccache'
        if [[ ! -z '${{ inputs.shared-key }}' ]]; then
          key="$key-${{ inputs.shared-key }}"
        else
          if [[ ! -z '${{ inputs.key }}' ]]; then
            key="$key-${{ inputs.key }}"
          fi
          key="$key-${{ github.job }}"
        fi
        key="$key-${{ steps.rust.outputs.release }}-${{ steps.rust.outputs.host }}-${{ steps.rust.outputs.commit-hash }}"
        hash='${{ hashFiles('**/Cargo.toml', '**/Cargo.lock', 'rust-toolchain', 'rust-toolchain.toml') }}'
        echo "key=$key-${hash:0:20}" >> $GITHUB_OUTPUT
        echo "restore-key=$key-" >> $GITHUB_OUTPUT
      shell: bash
    - name: Installing sccache
      run: |
        asset_name='sccache-${{ inputs.version }}-x86_64-${{ steps.platform.outputs.platform }}'
        curl --retry 5 --no-progress-meter --location --output "$asset_name.tar.gz" "https://github.com/mozilla/sccache/releases/download/${{ inputs.version }}/$asset_name.tar.gz"
        tar -zxf "$asset_name.tar.gz"
        cp "$asset_name/sccache" '/usr/local/bin/sccache'
        chmod +x '/usr/local/bin/sccache'
        rm -r "$asset_name"
        rm "$asset_name.tar.gz"
      shell: bash
    - name: Configuring sccache environment
      run: |
        if [ -z '${{ env.RUSTC_WRAPPER }}' ]; then
          echo 'RUSTC_WRAPPER=sccache' >> $GITHUB_ENV
        fi

        if [ -z '${{ inputs.cache-dir }}' ]; then
          echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV
        else
          echo "SCCACHE_DIR=${{ inputs.cache-dir }}" >> $GITHUB_ENV
        fi

        if [ -n '${{ inputs.cache-size }}' ]; then
          echo "SCCACHE_CACHE_SIZE=${{ inputs.cache-size }}" >> $GITHUB_ENV
        fi

        # Disable incremental builds as they break sccache.
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      shell: bash
    - name: Setup Debug Logging
      if: runner.debug == '1'
      uses: gacts/run-and-post-run@fe4132a675276bbabaeea80a61dba37cdb98d2e4 # v1.3.0
      with:
        run: |
          echo "SCCACHE_ERROR_LOG=/tmp/debug.log" >> $GITHUB_ENV
          echo "SCCACHE_LOG=debug" >> $GITHUB_ENV
        post: |
          cat /tmp/debug.log
    - name: Restore cache
      id: restore
      if: inputs.skip-save == 'true'
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{ env.SCCACHE_DIR }}
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          !target/**/bundle.car
        key: ${{ steps.cache.outputs.key }}
        restore-keys: |
          ${{ steps.cache.outputs.restore-key }}
    - name: Restore and save cache
      id: restore-save
      if: inputs.skip-save != 'true'
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.SCCACHE_DIR }}
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          !target/**/bundle.car
        key: ${{ steps.cache.outputs.key }}
        restore-keys: |
          ${{ steps.cache.outputs.restore-key }}
    - name: Installing cargo-cache
      if: inputs.autoclean == 'true' && inputs.skip-save == 'false'
      run: cargo install cargo-cache
      shell: bash
    - name: Cleaning cache
      if: inputs.autoclean == 'true' && inputs.skip-save == 'false'
      uses: gacts/run-and-post-run@fe4132a675276bbabaeea80a61dba37cdb98d2e4 # v1.3.0
      with:
        post: cargo cache --autoclean
    - name: Show Caching Statistics
      uses: gacts/run-and-post-run@fe4132a675276bbabaeea80a61dba37cdb98d2e4 # v1.3.0
      with:
        post: sccache --show-stats
